"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = require("express");
const Config_1 = require("../../Config");
class GuildRooter {
    constructor(app, client) {
        this.app = app;
        this.client = client;
        this.router = express_1.Router();
        this.app.use(this.router);
        // https://localhost/v1/get/guild/ID
        this.router.get("/v1/get/guild/:id", (req, res) => {
            const guild = this.client.guilds.cache.get(req.params.id);
            if (!guild)
                return res.status(404).send({ message: "Guild not found..." });
            return res.status(200).send({
                name: guild.name,
                owner: guild.owner,
                members: guild.memberCount
            });
        });
        this.router.post("/v1/post/guild-name/:id", (req, res) => {
            if (req.headers.authorization !== Config_1.authorization)
                return res.status(401).send({ message: "401" });
            const guild = this.client.guilds.cache.get(req.params.id);
            if (!guild)
                return res.status(404).send({ message: "Guild not found..." });
            if (!req.body.name)
                return res.status(404).send({ message: "404" });
            if (req.body.name.length > 32)
                return res.status(400).send({ message: "(404) => Guild name cannot exceed over 32 chars..." });
            if (!guild.me.permissions.has("MANAGE_GUILD"))
                return res.status(401).send({ message: "Missing Permission: MANAGE_GUILD" });
            guild.setName(req.body.name);
            return res.status(201).send(req.body);
        });
    }
}
exports.default = GuildRooter;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiR3VpbGRSb290ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvQVBJL3Jvb3RlcnMvR3VpbGRSb290ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxxQ0FBaUU7QUFHakUseUNBQTZDO0FBRTdDLE1BQXFCLFdBQVc7SUFLNUIsWUFBbUIsR0FBZ0IsRUFBRSxNQUFvQjtRQUNyRCxJQUFJLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUNmLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxNQUFNLEdBQUcsZ0JBQU0sRUFBRSxDQUFDO1FBRXZCLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUUxQixvQ0FBb0M7UUFDcEMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsbUJBQW1CLEVBQUUsQ0FBQyxHQUFZLEVBQUUsR0FBYSxFQUFFLEVBQUU7WUFDakUsTUFBTSxLQUFLLEdBQVUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ2pFLElBQUcsQ0FBQyxLQUFLO2dCQUFFLE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxPQUFPLEVBQUUsb0JBQW9CLEVBQUMsQ0FBQyxDQUFDO1lBRXpFLE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUM7Z0JBQ3hCLElBQUksRUFBRSxLQUFLLENBQUMsSUFBSTtnQkFDaEIsS0FBSyxFQUFFLEtBQUssQ0FBQyxLQUFLO2dCQUNsQixPQUFPLEVBQUUsS0FBSyxDQUFDLFdBQVc7YUFDN0IsQ0FBQyxDQUFDO1FBQ1AsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyx5QkFBeUIsRUFBRSxDQUFDLEdBQVksRUFBRSxHQUFhLEVBQUUsRUFBRTtZQUN4RSxJQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsYUFBYSxLQUFLLHNCQUFhO2dCQUFFLE9BQU8sR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFDLENBQUMsQ0FBQztZQUUvRixNQUFNLEtBQUssR0FBVSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDakUsSUFBRyxDQUFDLEtBQUs7Z0JBQUUsT0FBTyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLE9BQU8sRUFBRSxvQkFBb0IsRUFBQyxDQUFDLENBQUM7WUFFekUsSUFBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSTtnQkFBRSxPQUFPLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUMsT0FBTyxFQUFFLEtBQUssRUFBQyxDQUFDLENBQUM7WUFDakUsSUFBRyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsRUFBRTtnQkFBRSxPQUFPLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUMsT0FBTyxFQUFFLG9EQUFvRCxFQUFDLENBQUMsQ0FBQztZQUMzSCxJQUFHLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQztnQkFBRSxPQUFPLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUMsT0FBTyxFQUFFLGtDQUFrQyxFQUFDLENBQUMsQ0FBQztZQUV6SCxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7WUFFN0IsT0FBTyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDMUMsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0NBQ0o7QUF2Q0QsOEJBdUNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUm91dGVyLCBSZXF1ZXN0LCBSZXNwb25zZSwgQXBwbGljYXRpb24gfSBmcm9tIFwiZXhwcmVzc1wiO1xyXG5pbXBvcnQgeyBBa2Fpcm9DbGllbnQgfSBmcm9tIFwiZGlzY29yZC1ha2Fpcm9cIjtcclxuaW1wb3J0IHsgR3VpbGQgfSBmcm9tIFwiZGlzY29yZC5qc1wiO1xyXG5pbXBvcnQgeyBhdXRob3JpemF0aW9uIH0gZnJvbSBcIi4uLy4uL0NvbmZpZ1wiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR3VpbGRSb290ZXIge1xyXG4gICAgcHJvdGVjdGVkIGFwcDogQXBwbGljYXRpb247XHJcbiAgICBwcm90ZWN0ZWQgY2xpZW50OiBBa2Fpcm9DbGllbnQ7XHJcbiAgICBwcm90ZWN0ZWQgcm91dGVyOiBSb3V0ZXI7XHJcblxyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKGFwcDogQXBwbGljYXRpb24sIGNsaWVudDogQWthaXJvQ2xpZW50KXtcclxuICAgICAgICB0aGlzLmFwcCA9IGFwcDtcclxuICAgICAgICB0aGlzLmNsaWVudCA9IGNsaWVudDtcclxuICAgICAgICB0aGlzLnJvdXRlciA9IFJvdXRlcigpO1xyXG5cclxuICAgICAgICB0aGlzLmFwcC51c2UodGhpcy5yb3V0ZXIpO1xyXG5cclxuICAgICAgICAvLyBodHRwczovL2xvY2FsaG9zdC92MS9nZXQvZ3VpbGQvSURcclxuICAgICAgICB0aGlzLnJvdXRlci5nZXQoXCIvdjEvZ2V0L2d1aWxkLzppZFwiLCAocmVxOiBSZXF1ZXN0LCByZXM6IFJlc3BvbnNlKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGd1aWxkOiBHdWlsZCA9IHRoaXMuY2xpZW50Lmd1aWxkcy5jYWNoZS5nZXQocmVxLnBhcmFtcy5pZCk7XHJcbiAgICAgICAgICAgIGlmKCFndWlsZCkgcmV0dXJuIHJlcy5zdGF0dXMoNDA0KS5zZW5kKHsgbWVzc2FnZTogXCJHdWlsZCBub3QgZm91bmQuLi5cIn0pO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoMjAwKS5zZW5kKHtcclxuICAgICAgICAgICAgICAgIG5hbWU6IGd1aWxkLm5hbWUsXHJcbiAgICAgICAgICAgICAgICBvd25lcjogZ3VpbGQub3duZXIsXHJcbiAgICAgICAgICAgICAgICBtZW1iZXJzOiBndWlsZC5tZW1iZXJDb3VudFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5yb3V0ZXIucG9zdChcIi92MS9wb3N0L2d1aWxkLW5hbWUvOmlkXCIsIChyZXE6IFJlcXVlc3QsIHJlczogUmVzcG9uc2UpID0+IHtcclxuICAgICAgICAgICAgaWYocmVxLmhlYWRlcnMuYXV0aG9yaXphdGlvbiAhPT0gYXV0aG9yaXphdGlvbikgcmV0dXJuIHJlcy5zdGF0dXMoNDAxKS5zZW5kKHsgbWVzc2FnZTogXCI0MDFcIn0pO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgZ3VpbGQ6IEd1aWxkID0gdGhpcy5jbGllbnQuZ3VpbGRzLmNhY2hlLmdldChyZXEucGFyYW1zLmlkKTtcclxuICAgICAgICAgICAgaWYoIWd1aWxkKSByZXR1cm4gcmVzLnN0YXR1cyg0MDQpLnNlbmQoeyBtZXNzYWdlOiBcIkd1aWxkIG5vdCBmb3VuZC4uLlwifSk7XHJcblxyXG4gICAgICAgICAgICBpZighcmVxLmJvZHkubmFtZSkgcmV0dXJuIHJlcy5zdGF0dXMoNDA0KS5zZW5kKHttZXNzYWdlOiBcIjQwNFwifSk7XHJcbiAgICAgICAgICAgIGlmKHJlcS5ib2R5Lm5hbWUubGVuZ3RoID4gMzIpIHJldHVybiByZXMuc3RhdHVzKDQwMCkuc2VuZCh7bWVzc2FnZTogXCIoNDA0KSA9PiBHdWlsZCBuYW1lIGNhbm5vdCBleGNlZWQgb3ZlciAzMiBjaGFycy4uLlwifSk7XHJcbiAgICAgICAgICAgIGlmKCFndWlsZC5tZS5wZXJtaXNzaW9ucy5oYXMoXCJNQU5BR0VfR1VJTERcIikpIHJldHVybiByZXMuc3RhdHVzKDQwMSkuc2VuZCh7bWVzc2FnZTogXCJNaXNzaW5nIFBlcm1pc3Npb246IE1BTkFHRV9HVUlMRFwifSk7XHJcblxyXG4gICAgICAgICAgICBndWlsZC5zZXROYW1lKHJlcS5ib2R5Lm5hbWUpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoMjAxKS5zZW5kKHJlcS5ib2R5KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufSJdfQ==